package com.cb.controller;

import com.cb.dto.UserDto;
import com.cb.model.User;
import com.cb.service.UserService;
import com.example.FakeEntity.Student;

import java.time.Duration;

import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.http.MediaType;
import org.springframework.http.ResponseEntity;
import org.springframework.web.bind.annotation.*;
import reactor.core.publisher.Flux;
import reactor.core.publisher.Mono;

@RestController
@RequestMapping("/user")
public class UserController {

    @Autowired
    private UserService userService;

    @PostMapping("/create")
    Mono<User> create(@RequestBody Mono<UserDto> userDto) {
        return userService.create(userDto);
    }
   
    @GetMapping(value="/get/{userId}",produces = MediaType.TEXT_EVENT_STREAM_VALUE)
    Mono<ResponseEntity<User>> retrieve(@PathVariable int userId) {
    	//Flux<User> li1=Flux.range(1, 20).delayElements(Duration.ofMillis(100))
			//	.map();
		
    	return userService.retrieve(userId)
        .delayElement(Duration.ofMillis(100))
        .flatMap(user -> Mono.just(ResponseEntity.ok(user)))
        .switchIfEmpty(Mono.just(ResponseEntity.notFound().build()));

       
    }

    @PutMapping("/update/{userId}")
    Mono<ResponseEntity<User>> update(@PathVariable int userId, @RequestBody Mono<UserDto> userDto) {
        return userService.update(userId, userDto).map(ResponseEntity::ok).defaultIfEmpty(
                ResponseEntity.notFound().build());
    }

    @DeleteMapping("/delete/{userId}")
    Mono<Void> delete(@PathVariable int userId) {
        return userService.delete(userId);
    }

    @GetMapping("/getall")
    Flux<User> list() {
        return userService.list();
    }
    
    @GetMapping("/g")
    public String cre()
    {
    	return "Hello World";
    }
}